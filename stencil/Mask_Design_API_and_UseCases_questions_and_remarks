
implement __ne__()
Not necessary according to https://stackoverflow.com/questions/4352244/python-should-i-implement-ne-operator-based-on-eq
except if python2


class Mask:
    ...
    # for fault of a better name: calling these class variables punched_repr and
    # solid_repr created masking issues with mypy as follows:
    # stencil.py:79: error: Cannot assign to class variable "punched_repr" via instance
    # stencil.py:80: error: Cannot assign to class variable "solid_repr" via instance
    # @TODO: dicsuss this design issue with Sean, either get rid of it, or install complex machinery to secure it

-->    # not tested: case where both Mask.generic_solid_repr and Mask.generic_punched_repr are changed
-->    # @TODO: discuss design with Sean --> changing class variables values that represent masked pos is maybe a bad idea

    generic_punched_repr = '^'   # type: ClassVar[str]
    generic_solid_repr = '-'     # type: ClassVar[str]

    def __init__(self, size: int=0) -> None:
        ...
        # the following allows to maintain a degree of immutability for
        # instances of Mask even if class variables are modified at some point
        # this should maybe be a named tuple to guarantee immutability
        self.punched_repr: str = Mask.generic_punched_repr
        self.solid_repr: str = Mask.generic_solid_repr

    ...

    def apply_to(self, sequence: Sequence,
                 substitute: str='-') -> Sequence:
        """applies the mask to the sequence provided, and return a new
        sequence of same length where only the elements located at punched
        positions on the mask are visible; the other elements are concealed
        with self.solid_repr by default, or a substitute if one is provided

        :param sequence: a sequence to be masked
        :param substitute: a character to be substituted to the SOLID
                           positions in the mask
        :return: a new sequence where the elements marked SOLID on the mask
                 have been concealed by the substitute character.

        @TODO: make polymorphic to accept other Sequence objects, not only str
        @TODO: ? add method remove where characters at punched locations are not substituted
        @TODO: ? add method insert where characters at punched locations are not substituted, but new characters are inserted?



@TODO: because a mask cannot be repunched, there is a need for a combining masks method that will create a new mask from a combination of provided ones.
@TODO: mask.get_pattern() --> obtain a string pattern from a mask - alias for __str__() ?
@TODO: Pattern factories --> make mask patterns from... "patterns"
@TODO: a class Pattern? Are Patterns objects in their own right
@TODO: a Shield? a Mask subclass that is used to protect a string from modification at some positions? -- String2D with attribute shielded?
